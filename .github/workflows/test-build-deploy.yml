name: Test, Build, Deploy

env:
    ARGOCD_APP: uk-landingzone-auth-frontend
    ARGOCD_APP_CHART_TAG_PATH: authFrontend.tag

on:
    push:
        branches:
            - "**"
        tags:
            - "v*"
    pull_request:
        branches-ignore:
            - "**"

    # Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:

jobs:
    test:
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v2
            - uses: actions/setup-node@v2
              with:
                  node-version: 16
                  cache: npm
                  registry-url: https://npm.pkg.github.com/

            - run: npm ci --no-progress --no-audit
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}
                  CYPRESS_INSTALL_BINARY: 0

            - name: Lint JS
              run: npm run check

            - name: Unit tests
              run: npm run test

    build:
        runs-on: ubuntu-latest
        needs: test
        if: ${{ github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v') }}
        strategy:
            matrix:
                envfile:
                    - dev/.env.alpha
                    - uk/.env.landingzone
                    # Uncomment to enable any of the others
                    # - global/.env.loadtest
                    # - global/.env.loadtest-k8s
                    # - global/.env.onboarding
                    # - global/.env.prod
                    # - global/.env.stage
                    # - id/.env.beta
                    # - id/.env.prod
                    # - id/.env.rk_beta
                    # - id/.env.rk_prod
                    # - in/.env.prod
                    # - internal/.env.alpha
                    # - internal/.env.sso
                    # - lk/.env.prod
                    # - pk/.env.prod
                    # - scoe/.env.poc
                    # - sre/.env.alpha
                    # - sre/.env.beta
                    # - uk/.env.prod
                    # - vn/.env.alpha
                    # - vn/.env.beta
                    # - vn/.env.prod
        steps:
            - uses: actions/checkout@v2

            - uses: actions/setup-node@v2
              with:
                  node-version: 16
                  cache: npm
                  registry-url: https://npm.pkg.github.com/

            - run: npm ci --no-progress --no-audit
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}
                  CYPRESS_INSTALL_BINARY: 0

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.ECR_AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY }}
                  aws-region: eu-west-2

            - name: Login to Amazon ECR
              uses: aws-actions/amazon-ecr-login@v1

            - name: Run NPM build with ${{ matrix.envfile }} dot-env file
              run: |
                  set +x
                  export ENV_TAG=$(echo "${{ matrix.envfile }}" | sed -E 's/([^0-9a-zA-Z]+)/-/g' | awk '{print tolower($0)}')
                  export BRANCH_TAG=$(echo "${GITHUB_REF_NAME}" | sed -E 's/([^0-9a-zA-Z]+)/-/g' | awk '{print tolower($0)}')
                  cp deploy/config/${{ matrix.envfile }} .env
                  source .env
                  npm run build
                  docker build -t $ECR_REPOSITORY:$BRANCH_TAG-$ENV_TAG-latest -f deploy/Dockerfile .
                  docker tag $ECR_REPOSITORY:$BRANCH_TAG-$ENV_TAG-latest $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH_TAG-$ENV_TAG-latest
                  docker tag $ECR_REPOSITORY:$BRANCH_TAG-$ENV_TAG-latest $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH_TAG-$ENV_TAG-${GITHUB_SHA::7}
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH_TAG-$ENV_TAG-latest
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH_TAG-$ENV_TAG-${GITHUB_SHA::7}
              env:
                  ECR_REGISTRY: 942095822719.dkr.ecr.eu-west-2.amazonaws.com
                  ECR_REPOSITORY: kidsloop-auth-frontend

    deploy-landing-zone:
        # deploy-landing-zone - this Github Actions job will deploy images created on `main` to the Kidsloop landing zone.
        # Landing zone URL: hub.landing-zone.kidsloop.live

        # ENV required: [ARGOCD_APP, ARGOCD_APP_CHART_TAG_PATH]
        # SECRETS required: [TOOLS_KUBECONFIG_CONTENT_B64, ARGOCD_AUTH_USERNAME, ARGOCD_AUTH_PASSWORD]
        runs-on: ubuntu-latest
        needs: build
        # Put any deploy conditions in here.
        if: github.ref == 'refs/heads/master'
        env:
            # Due to a Teleport bug, we are using K8 port forwarding to connect to ArgoCD for now.
            TOOLS_KUBECONFIG: "${{ github.workspace }}/.kube/tools-kubeconfig.yml"
            ARGOCD_SERVER: localhost:8080
            ARGOCD_OPTS: --grpc-web --insecure --plaintext
        name: Deploy to Landing Zone
        steps:
            # Set up the kubeconfig file in GHA secrets first
            - name: Set up kubernetes config file
              run: |
                  mkdir -p '${{ github.workspace }}/.kube' \
                    && echo '${{ secrets.TOOLS_KUBECONFIG_CONTENT_B64 }}' | base64 -d > $TOOLS_KUBECONFIG

            - name: Test kubernetes connection
              run: "kubectl version --kubeconfig $TOOLS_KUBECONFIG"

            - name: Configure ArgoCD CLI
              uses: clowdhaus/argo-cd-action@v1.9.0
              with:
                  version: 2.2.5
                  command: version
                  options: --client

            - name: Set up kubernetes port-forwarding connection to tools cluster
              run: "kubectl port-forward -n argocd svc/argocd-server 8080:80 --kubeconfig $TOOLS_KUBECONFIG &"

            - name: Configure tags
              run: |
                  export BRANCH_TAG=$(echo "${GITHUB_REF_NAME}" | sed -E 's/([^0-9a-zA-Z]+)/-/g' | awk '{print tolower($0)}')
                  export ENV_TAG="uk-env-landingzone"
                  export DEPLOY_TAG=$BRANCH_TAG-$ENV_TAG-${GITHUB_SHA::7}
                  echo "TAG    : ${TAG}"
                  echo "COMMIT : ${GITHUB_SHA::7}"
                  echo "IMAGE  : $DEPLOY_TAG"
                  echo "TAG=$TAG" >> $GITHUB_ENV
                  echo "DEPLOY_TAG=$DEPLOY_TAG" >> $GITHUB_ENV

            - name: Log into ArgoCD
              uses: clowdhaus/argo-cd-action@v1.9.0
              with:
                  version: 2.2.5
                  command: login
                  options: >
                      '${{ env.ARGOCD_SERVER }}'
                      --username '${{ secrets.ARGOCD_AUTH_USERNAME }}'
                      --password '${{ secrets.ARGOCD_AUTH_PASSWORD }}'
                      ${{ env.ARGOCD_OPTS }}

            - name: Show ArgoCD app info
              uses: clowdhaus/argo-cd-action@v1.9.0
              with:
                  version: 2.2.5
                  command: app
                  options: get ${{ env.ARGOCD_APP }}

            - name: Set ArgoCD app tag to build output
              uses: clowdhaus/argo-cd-action@v1.9.0
              with:
                  version: 2.2.5
                  command: app
                  options: set ${{ env.ARGOCD_APP }} -p ${{ env.ARGOCD_APP_CHART_TAG_PATH }}=${{ env.DEPLOY_TAG }}

            - name: Sync the app now
              uses: clowdhaus/argo-cd-action@v1.9.0
              with:
                  version: 2.2.5
                  command: app
                  options: sync ${{ env.ARGOCD_APP }} --timeout 300

            - name: Status - ArgoCD url
              if: always()
              uses: ouzi-dev/commit-status-updater@v1.1.0
              with:
                  status: "${{ job.status }}"
                  url: https://argocd.kidsloop.teleport.sh/applications/${{ env.ARGOCD_APP }}
                  description: "Click to view the app in ArgoCD"
                  name: "ArgoCD"

            - name: Status - target url
              if: always()
              uses: ouzi-dev/commit-status-updater@v1.1.0
              with:
                  status: "${{ job.status }}"
                  url: https://hub.landing-zone.kidsloop.live
                  description: "Click to test in the 'Landing Zone' environment"
                  name: "Landing Zone"

    deploy-alpha-dev:
        runs-on: ubuntu-latest
        needs: build
        # Put any deploy conditions in here.
        if: github.ref == 'refs/heads/master'
        env:
            ENVFILE: dev/.env.alpha
            AWS_REGION: ap-northeast-2
            AWS_S3_BUCKET: kidsloop-alpha-auth-rested-mackerel
            AWS_CLOUDFRONT_DISTRIBUTION_ID: ELJUEQIM62ZJZ

        name: Deploy to alpha-dev
        steps:
            - uses: actions/checkout@v2

            - uses: actions/setup-node@v2
              with:
                  node-version: 16
                  cache: npm
                  registry-url: https://npm.pkg.github.com/

            - run: npm ci --no-progress --no-audit
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}
                  CYPRESS_INSTALL_BINARY: 0

            - name: Run NPM build for alpha-dev
              run: |
                  set +x
                  cp deploy/config/$ENVFILE .env
                  source .env
                  npm run build

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_ALPHA_DEV }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ALPHA_DEV }}
                  aws-region: ${{ env.AWS_REGION }}

            - name: Upload to S3
              run: aws s3 sync dist s3://${{ env.AWS_S3_BUCKET }}/latest --delete

            - name: Cloudfront cache invalidation
              run: aws cloudfront create-invalidation --paths "/*" --distribution-id ${{ env.AWS_CLOUDFRONT_DISTRIBUTION_ID }}
              env:
                  AWS_PAGER: ""
